name: Run build pipeline

on:
  push:
    branches:
      - main
      - stable/*
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: maykinmedia/bobvance
  DJANGO_SETTINGS_MODULE: bobvance.conf.ci
  DOCKER_BUILDKIT: '1'

jobs:
  tests:
    name: Run the Django test suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options:
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3
      - name: Set up backend environment
        uses: maykinmedia/setup-django-backend@v1
        with:
          python-version: '3.9'
          optimize-postgres: 'yes'
          pg-service: 'postgres'
          setup-node: 'yes'

      - name: Run tests
        run: |
          python src/manage.py compilemessages
          python src/manage.py collectstatic --noinput --link
          coverage run src/manage.py test src
        env:
          SECRET_KEY: dummy
          DB_USER: postgres
          DB_PASSWORD: ''

      - name: Publish coverage report
        uses: codecov/codecov-action@v3

  docker_build:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v3

      - name: Set tag
        id: vars
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          [ "$VERSION" == "main" ] && VERSION=latest

          echo "tag=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build the production Docker image
        run: |
          docker build . \
            --tag $IMAGE_NAME:$RELEASE_VERSION \
            --build-arg COMMIT_HASH=${{ steps.vars.outputs.git_hash }} \
            --build-arg RELEASE=${{ steps.vars.outputs.tag }} \
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}

      - run: docker image save -o image.tar $IMAGE_NAME:${{ steps.vars.outputs.tag }}
      - name: Store image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: image.tar
          retention-days: 1

  docker_push:
    needs: docker_build
    name: Push Docker image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' # Exclude PRs
    steps:
      - uses: actions/checkout@v3

      - name: Download built image
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Set tag
        id: vars
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          [ "$VERSION" == "main" ] && VERSION=latest

          echo "tag=${VERSION}" >> $GITHUB_OUTPUT

      - name: Load image
        run: |
          docker image load -i image.tar

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push the Docker image (production)
        run: docker push $IMAGE_NAME:$RELEASE_VERSION
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
